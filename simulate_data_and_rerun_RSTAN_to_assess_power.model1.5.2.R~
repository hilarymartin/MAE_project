library(rstan)
library(parallel)

description="model3.2.maternal.mu_m_N_36_6.sigmasq_m_IG_5_5"
mydir="RSTAN_output_on_duoHMM_more_stringent/model3.2"

#first prepare data for input
if(FALSE){
#    load("/well/donnelly/hilary/maternal_age_and_recombination/RSTAN_output_on_duoHMM_more_stringent/RSTAN.model3.2.adjusted_priors.all_chains.mat.including_alpha.RData")
        load("/well/donnelly/hilary/maternal_age_and_recombination/RSTAN_output_on_duoHMM_more_stringent/longer_chains/RSTAN.model3.2.adjusted_priors.all_chains.mat.including_alpha.RData")
    mysim<-extract(model3.2.mat,permuted=T)

        # -0.01698482  0.04226615
#    mybins=c(seq(from=0,to=0.025,by=0.005),max(mysim$beta_Age))
            mybins=c(-0.01698482,seq(from=-0.002,to=0.03,by=0.004),max(mysim$beta_Age))
    n.in.bins=c()
    for(i in 1:(length(mybins)-1)){
        n.in.bins=c(n.in.bins,sum(mysim$beta_Age > mybins[i] & mysim$beta_Age <=mybins[i+1]))
    }

    mysim$bin.beta.age = 0
    mysim$bin.beta.age[mysim$beta_Age <=0] = -1
    samples.by.bin = list()
    for(i in 1:(length(mybins)-1)){
        mysim$bin.beta.age[mysim$beta_Age > mybins[i] & mysim$beta_Age <=mybins[i+1]] = mybins[i]
        indexes = which(mysim$beta_Age > mybins[i] & mysim$beta_Age <=mybins[i+1])
        samples = sample(indexes,1000,replace=T)
        samples.by.bin[[i]] = samples
    }
    
#    save(mysim,file=paste0(mydir,"/",description,".draws_with_beta_age_binned.RData"))
            save(mysim,file=paste0(mydir,"/",description,".longer_chains.draws_with_beta_age_binned.RData"))
#    save(samples.by.bin,file=paste0(mydir,"/",description,".draws_to_sample_by_beta_age_bin.RData"))
            save(samples.by.bin,file=paste0(mydir,"/",description,".longer_chains.draws_to_sample_by_beta_age_bin.RData"))
    
    
}

argv <- commandArgs(trailingOnly = TRUE)
print(argv)
#load(file=paste0(mydir,"/",description,".draws_with_beta_age_binned.RData"))
load(file=paste0(mydir,"/",description,".longer_chains.draws_with_beta_age_binned.RData"))
#load(paste0(mydir,"/",description,".draws_to_sample_by_beta_age_bin.RData"))
load(file=paste0(mydir,"/",description,".longer_chains.draws_to_sample_by_beta_age_bin.RData"))

setwd("/well/donnelly/hilary/maternal_age_and_recombination/")
load("/well/donnelly/hilary/maternal_age_and_recombination/duoHMM_data_for_RSTAN.more_stringent.RData")
load(paste0(mydir,"/",description,".best_draw.RData"))

bin.number= as.numeric(argv[1])
sim.number =as.numeric(argv[2])
set.seed(sim.number)

#need to use a coherent set of parameters
index=samples.by.bin[[bin.number]][sim.number]

####simulate data based on parameters 
family.effects=rnorm(n=length(unique(data2.mat2$family)),mean=mysim$mu_m[index],sd=sqrt(mysim$sigmasq_m[index]))

a0=family.effects[data2.mat2$family]
#negative binomial
fake.y=c()
for(i in 1:length(a0)){
    fake.y=c(fake.y,rnbinom(1,size=exp(0.1*(a0[i] + mysim$beta_Age[index]*data2.mat2$Age[i]))/(mysim$omega[index]-1),prob=(1/(mysim$p_by_cohort[index,data2.mat2$cohort[i]] * (mysim$omega[index]-1) + 1))))
}
summary(fake.y)
###prepare data
sim.data=data2.mat2
sim.data$y=fake.y

### run model
model1.6.mat.compiled = stan(file = "/well/donnelly/hilary/maternal_age_and_recombination/bin/RSTAN.model3.2.adjusted_priors.stan",data=sim.data,iter=10000,chains=0)
model1.6.mat = stan(fit = model1.6.mat.compiled, data = sim.data,chains = 4, iter=10000,pars=c("beta_Age","omega","mu_m","sigmasq_m","exp_a0"))
print(model1.6.mat,pars=c("beta_Age","omega","sigmasq_m","mu_m"),digits=4)
mysim<-extract(model1.6.mat,permuted=T)
myquantiles=quantile(mysim$beta_Age,c(1/3,2/3,0.25,0.75,1/6,5/6,0.025,0.975,0.005,0.995))
beta.posterior=mysim$beta_Age
#save( beta.posterior,file=paste0(mydir,"/simulation_with_true_beta_Age_bin_",bin.number,".beta_Age_posteriors.",description,".simulation_",sim.number,".RData"))
save(beta.posterior,file=paste0(mydir,"/longer_chains/simulation_with_true_beta_Age_bin_",bin.number,".beta_Age_posteriors.",description,".simulation_",sim.number,".RData"))
#write.table(myquantiles,paste0(mydir,"/simulation_with_true_beta_Age_bin_",bin.number,".beta_Age_credible_intervals.",description,".simulation_",sim.number,".txt"))
write.table(myquantiles,paste0(mydir,"/longer_chains/simulation_with_true_beta_Age_bin_",bin.number,".beta_Age_credible_intervals.",description,".simulation_",sim.number,".txt"))

if(FALSE){
coverage.by.beta.age=list()
exclude=list()
load(file=paste0(mydir,"/",description,".draws_with_beta_age_binned.RData"))
load(file=paste0(mydir,"/",description,".draws_to_sample_by_beta_age_bin.RData"))

coverage.by.bin=NULL
for(b in 1:6){
    all.coverage=as.data.frame(matrix(NA,ncol=100,nrow=8))
    for(sim.number in 1:100){
        file.exists=FALSE
        if(b==1){
            if(file.exists(paste0(mydir,"/simulation_with_true_beta_Age_bin_",b,".beta_Age_posteriors.",description,".simulation_",sim.number,".RData"))){
                file.exists=TRUE
                load(file=paste0(mydir,"/simulation_with_true_beta_Age_bin_",b,".beta_Age_posteriors.",description,".simulation_",sim.number,".RData"))
                intervals=read.delim(paste0(mydir,"/simulation_with_true_beta_Age_bin_",b,".beta_Age_credible_intervals.",description,".simulation_",sim.number,".txt"),header=T,sep="")
            }
        } else {
            if(file.exists(paste0(mydir,"/simulation_with_true_beta_Age_bin_",b,".beta_Age_posteriors.",description,".simulation_",sim.number,".parallel.RData"))){
                            file.exists=TRUE
                load(file=paste0(mydir,"/simulation_with_true_beta_Age_bin_",b,".beta_Age_posteriors.",description,".simulation_",sim.number,".parallel.RData"))
                intervals=read.delim(paste0(mydir,"/simulation_with_true_beta_Age_bin_",b,".beta_Age_credible_intervals.",description,".simulation_",sim.number,".parallel.txt"),header=T,sep="")
            }
        }
        if(file.exists){
            myquantiles=quantile(beta.posterior,c(1/6,5/6))
            beta_Age = mysim$beta_Age[samples.by.bin[[b]][sim.number]]
            coverage=c(            intervals[1,1]<beta_Age & intervals[2,1] > beta_Age, intervals[1,1]<0 & intervals[2,1] > 0,
                myquantiles[1] <beta_Age & myquantiles[2] > beta_Age,myquantiles[1] <0 & myquantiles[2] > 0,
                intervals[3,1]<beta_Age & intervals[4,1] > beta_Age,intervals[3,1]<0 & intervals[4,1] > 0,
                intervals[5,1]<beta_Age & intervals[6,1] > beta_Age, intervals[5,1]<0 & intervals[6,1] > 0)
            all.coverage[,sim.number]=coverage
        }
    }
                                        #    exclude[[i]]=which(colSums(is.na(all.intervals))!=0)
                                        #    all.intervals=all.intervals[,colSums(is.na(all.intervals))==0]
 #   coverage.by.beta.age[[i]]=all.intervals
#    coverage=c(sum(all.intervals[1,]<beta_Age & all.intervals[2,] > beta_Age), sum(all.intervals[1,]<0 & all.intervals[2,] > 0),sum(all.intervals[3,]<beta_Age & all.intervals[4,] > beta_Age),
#        sum(all.intervals[3,]<0 & all.intervals[4,] > 0),sum(all.intervals[5,]<beta_Age & all.intervals[6,] > beta_Age), sum(all.intervals[5,]<0 & all.intervals[6,] > 0))/ncol(all.intervals)
    all.coverage=all.coverage[,colSums(is.na(all.coverage))==0]

    total.coverage = rowSums(all.coverage)/ncol(all.coverage)
    
    names(total.coverage)=c("coverage_beta_Age_33%","coverage_0_33%","coverage_beta_Age_67%","coverage_0_67%","coverage_beta_Age_95%","coverage_0_95%","coverage_beta_Age_99%","coverage_0_99%")
    coverage.by.bin = rbind(coverage.by.bin,total.coverage)
#    write.table(coverage,paste0("/home/hilary/maternal_age_recombination/frequentist_properties/coverage_probabilities_of_beta_Age.simulated_with_beta_Age_",beta_Age,".",description,".txt"),quote=F,sep="\t")
}
write.table(coverage.by.bin,paste0(mydir,"/coverage_and_power_by_bin_for_beta_Age.",description,".txt"),quote=F,sep="\t")
#    mybins=c(seq(from=0,to=0.025,by=0.005),max(mysim$beta_Age))
    mybins=c(seq(from=0,to=0.025,by=0.005),0.03486787)

   
#pdf("/home/hilary/maternal_age_recombination/frequentist_properties/coverage_plot_model1.6.2.maternal.pdf",height=4,width=5,useDingbats=FALSE)
pdf("/home/hilary/maternal_age_recombination/frequentist_properties/coverage_plot_model3.2.maternal.pdf",height=4,width=5,useDingbats=FALSE)
myx=mybins[1:6]+(mybins[2:7]-mybins[1:6])/2
plot(myx,coverage.by.bin[,"coverage_beta_Age_67%"]*100,col="blue",xlab="center of beta_Age bin",ylab="Coverage (%)",ylim=c(0,100),xlim=c(0,max(mysim$beta_Age)),type="b",pch=20)
for(i in 1:6){
#segments(x0=mybins[i],y0=coverage.by.bin[i,"coverage_beta_Age_67%"]*100,x1=mybins[i+1],y1=coverage.by.bin[i,"coverage_beta_Age_67%"]*100,col="blue",lwd=2)
#segments(x0=mybins[i],x1=mybins[i],y0=coverage.by.bin[i,"coverage_beta_Age_67%"]*100-2,y1=coverage.by.bin[i,"coverage_beta_Age_67%"]*100+2,col="blue")
#segments(x0=mybins[i+1],x1=mybins[i+1],y0=coverage.by.bin[i,"coverage_beta_Age_67%"]*100-2,y1=coverage.by.bin[i,"coverage_beta_Age_67%"]*100+2,col="blue")
}
  lines(myx,coverage.by.bin[,"coverage_beta_Age_33%"]*100,type="b",col="darkgreen",pch=20)
  lines(myx,coverage.by.bin[,"coverage_beta_Age_95%"]*100,type="b",col="purple",pch=20)

for(i in 1:6){
#segments(x0=mybins[i],y0=coverage.by.bin[i,"coverage_beta_Age_95%"]*100,x1=mybins[i+1],y1=coverage.by.bin[i,"coverage_beta_Age_95%"]*100,col="purple",lwd=2)
#segments(x0=mybins[i],x1=mybins[i],y0=coverage.by.bin[i,"coverage_beta_Age_95%"]*100-2,y1=coverage.by.bin[i,"coverage_beta_Age_95%"]*100+2,col="purple")
#segments(x0=mybins[i+1],x1=mybins[i+1],y0=coverage.by.bin[i,"coverage_beta_Age_95%"]*100-2,y1=coverage.by.bin[i,"coverage_beta_Age_95%"]*100+2,col="purple")
}
lines(myx,coverage.by.bin[,"coverage_beta_Age_99%"]*100,type="b",col="red",pch=20)
for(i in 1:6){
#segments(x0=mybins[i],y0=coverage.by.bin[i,"coverage_beta_Age_99%"]*100,x1=mybins[i+1],y1=coverage.by.bin[i,"coverage_beta_Age_99%"]*100,col="red",lwd=2)
#segments(x0=mybins[i],x1=mybins[i],y0=coverage.by.bin[i,"coverage_beta_Age_99%"]*100-2,y1=coverage.by.bin[i,"coverage_beta_Age_99%"]*100+2,col="red")
#segments(x0=mybins[i+1],x1=mybins[i+1],y0=coverage.by.bin[i,"coverage_beta_Age_99%"]*100-2,y1=coverage.by.bin[i,"coverage_beta_Age_99%"]*100+2,col="red")
}
legend("right",c("33% CI","67% CI","95% CI","99% CI"),col=c("darkgreen","blue","purple","red"),lty=1,cex=0.6,pch=20)
dev.off()

#pdf("/home/hilary/maternal_age_recombination/frequentist_properties/power_plot_model1.6.2.maternal.pdf",height=4,width=5,useDingbats=FALSE)
pdf("/home/hilary/maternal_age_recombination/frequentist_properties/power_plot_model3.2.maternal.pdf",height=4,width=5,useDingbats=FALSE)
myx=mybins[1:6]+(mybins[2:7]-mybins[1:6])/2
plot(myx,100-coverage.by.bin[,"coverage_0_67%"]*100,col="blue",xlab="center for beta_Age bin",ylab="Power (%)",ylim=c(0,100),xlim=c(0,max(mysim$beta_Age)),type="b",pch=20)
for(i in 1:6){
#segments(x0=mybins[i],y0=100-coverage.by.bin[i,"coverage_0_67%"]*100,x1=mybins[i+1],y1=100-coverage.by.bin[i,"coverage_0_67%"]*100,col="blue",lwd=2)
}
lines(myx,100-coverage.by.bin[,"coverage_0_33%"]*100,type="b",col="darkgreen",pch=20)
lines(myx,100-coverage.by.bin[,"coverage_0_95%"]*100,col="purple",type="b",pch=20)
for(i in 1:6){
#segments(x0=mybins[i],y0=100-coverage.by.bin[i,"coverage_0_95%"]*100,x1=mybins[i+1],y1=100-coverage.by.bin[i,"coverage_0_95%"]*100,col="purple",lwd=2)
}
lines(myx,100-coverage.by.bin[,"coverage_0_99%"]*100,col="red",type="b",pch=20)
for(i in 1:6){
#segments(x0=mybins[i],y0=100-coverage.by.bin[i,"coverage_0_99%"]*100,x1=mybins[i+1],y1=100-coverage.by.bin[i,"coverage_0_99%"]*100,col="red",lwd=2)
}
legend("topleft",c("33% CI","67% CI","95% CI","99% CI"),col=c("darkgreen","blue","purple","red"),lty=1,cex=0.6,pch=20)
dev.off()

